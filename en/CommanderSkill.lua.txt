slot0 = class("CommanderSkill", import(".BaseVO"))
slot0.ATTR_TYPE = 1
slot0.BUFF_TYPE = 2
slot0.ADVANCED_TYPE = 3

slot0.Ctor = function (slot0, slot1)
	slot0.id = slot1.id or slot1.skill_id
	slot0.configId = slot0.id
	slot0.level = slot1.level or slot1.skill_lv
	slot0.lockFlag = slot1.lock == 1
end

slot0.isLock = function (slot0)
	return slot0.lockFlag
end

slot0.setLock = function (slot0, slot1)
	slot0.lockFlag = slot1
end

slot0.isAdvanceSkill = function (slot0)
	return slot0:getConfig("type") == slot0.ADVANCED_TYPE
end

slot0.bindConfigTable = function (slot0)
	return pg.commander_skill_template
end

slot0.getPrevSkills = function (slot0)
	return slot0:getConfig("pre_ids")
end

slot0.upgrade = function (slot0)
	slot0.level = slot0.level + 1
end

slot0.getDesc = function (slot0)
	slot1 = slot0:getConfig("desc")

	if #slot0:getConfig("desc_add") > 0 then
		slot3 = ipairs
		slot4 = slot2[slot0.level] or {}

		for slot6, slot7 in slot3(slot4) do
			slot1 = string.gsub(slot1, "$" .. slot6, slot7)
		end

		return slot1
	else
		return slot1
	end
end

slot0.isMaxLevel = function (slot0)
	return slot0:getMaxLevel() == slot0.level
end

slot0.getLevelLimit = function (slot0)
	return slot0:getConfig("lv_limit")
end

slot0.getMaxLevel = function (slot0)
	return slot0:getConfig("max_level")
end

slot0.getUpgradeDesc = function (slot0)
	if slot0:getMaxLevel() < slot0.level + 1 then
		return i18n1("Max")
	else
		return CommanderSkill.New({
			id = slot0.id,
			level = slot1
		}):getDesc()
	end
end

slot0.getConsume = function (slot0)
	return slot0:getConfig("need_pt")[slot0.level] or 0, slot0:getConfig("need_resource")[slot0.level] or {}
end

slot0.getAttrAddition = function (slot0)
	slot2 = {}

	if slot0:getConfig("type") == slot0.ATTR_TYPE then
		for slot6, slot7 in ipairs(CommanderConst.ATTRS) do
			slot8 = slot0:getConfig(slot7) or {}

			for slot12 = 1, slot0.level, 1 do
				slot2[slot7] = (slot2[slot7] or 0) + (slot8[slot12] or 0)
			end
		end
	end

	return slot2
end

slot0.getSkillPoints = function (slot0)
	function slot1(slot0)
		return slot0:getConfig("need_pt") or {}[slot0] or 0
	end

	slot2 = 0

	for slot6 = 1, slot0.level, 1 do
		slot2 = slot2 + slot1(slot6)
	end

	return slot2
end

return slot0
